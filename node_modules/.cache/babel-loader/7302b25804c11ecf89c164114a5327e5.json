{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steve\\\\Desktop\\\\Code\\\\Level_2\\\\task12\\\\tetris\\\\react-teatris\\\\src\\\\Components\\\\Tetris.tsx\";\n///\n// src/components/Tetris.tsx\n// Import React\nimport * as React from 'react'; // import react-boostrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // Import TetrisBoard component\n\nimport TetrisBoard from './Board';\nimport PlayMusic from '../Media/Music'; // Define props for Tetris component\n\n// Create Tetris component\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props); // Generate board based on number of boardHeight & boardWidth props\n\n    this.handlePauseClick = () => {\n      this.setState(prev => ({\n        isPaused: !prev.isPaused\n      }));\n    };\n\n    this.handleNewGameClick = () => {\n      // Create an empty board\n      let field = [];\n\n      for (let y = 0; y < this.props.boardHeight; y++) {\n        let row = [];\n\n        for (let x = 0; x < this.props.boardWidth; x++) {\n          row.push(0);\n        }\n\n        field.push(row);\n      } // Set starting column to center\n\n\n      let xStart = Math.floor(parseInt(this.props.boardWidth) / 2); // Initialize state with starting conditions\n\n      this.setState({\n        activeTileX: xStart,\n        activeTileY: 1,\n        activeTile: 2,\n        tileRotate: 0,\n        score: 0,\n        level: 1,\n        tileCount: 0,\n        gameOver: false,\n        pauseMusic: false,\n        field: field\n      });\n    };\n\n    let _field = [];\n\n    for (let y = 0; y < props.boardHeight; y++) {\n      let row = [];\n\n      for (let x = 0; x < props.boardWidth; x++) {\n        row.push(0);\n      }\n\n      _field.push(row);\n    } // Set starting column to center\n\n\n    let _xStart = Math.floor(parseInt(props.boardWidth) / 2); // Initialize state with starting conditions\n\n\n    this.state = {\n      activeTileX: _xStart,\n      activeTileY: 1,\n      activeTile: 1,\n      tileRotate: 0,\n      score: 0,\n      level: 1,\n      tileCount: 0,\n      gameOver: false,\n      isPaused: false,\n      field: _field,\n      timerId: null,\n      pauseMusic: false,\n      tiles: [// 7 tiles\n      // Each tile can be rotated 4 times (x/y coordinates)\n      [// The default square\n      [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [// The cube tile (block 2x2)\n      [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]]], [// The I tile\n      [[0, -1], [0, 0], [0, 1], [0, 2]], [[-1, 0], [0, 0], [1, 0], [2, 0]], [[0, -1], [0, 0], [0, 1], [0, 2]], [[-1, 0], [0, 0], [1, 0], [2, 0]]], [// The T tile\n      [[0, 0], [-1, 0], [1, 0], [0, -1]], [[0, 0], [1, 0], [0, 1], [0, -1]], [[0, 0], [-1, 0], [1, 0], [0, 1]], [[0, 0], [-1, 0], [0, 1], [0, -1]]], [// The inverse L tile\n      [[0, 0], [-1, 0], [1, 0], [-1, -1]], [[0, 0], [0, 1], [0, -1], [1, -1]], [[0, 0], [1, 0], [-1, 0], [1, 1]], [[0, 0], [0, 1], [0, -1], [-1, 1]]], [// The L tile\n      [[0, 0], [1, 0], [-1, 0], [1, -1]], [[0, 0], [0, 1], [0, -1], [1, 1]], [[0, 0], [1, 0], [-1, 0], [-1, 1]], [[0, 0], [0, 1], [0, -1], [-1, -1]]], [// The Z tile\n      [[0, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [1, 0], [0, 1], [1, -1]], [[0, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [1, 0], [0, 1], [1, -1]]], [// The inverse Z tile\n      [[0, 0], [-1, 0], [0, -1], [1, -1]], [[0, 0], [0, -1], [1, 0], [1, 1]], [[0, 0], [-1, 0], [0, -1], [1, -1]], [[0, 0], [0, -1], [1, 0], [1, 1]]]]\n    };\n  }\n  /**\r\n   * @description Sets timer after component mounts\r\n   * Uses level (this.state.level) to determine the interval (game speed)\r\n   * and executes handleBoardUpdate() set to 'down' method during each interval\r\n   * @memberof Tetris\r\n   */\n\n\n  componentDidMount() {\n    let timerId;\n    timerId = window.setInterval(() => this.handleBoardUpdate('down'), 1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10));\n    this.setState({\n      timerId: timerId\n    });\n  }\n  /**\r\n   * @description Resets the timer when component unmounts\r\n   * @memberof Tetris\r\n   */\n\n\n  componentWillUnmount() {\n    window.clearInterval(this.state.timerId);\n  }\n  /**\r\n   * @description Handles board updates\r\n   * @param {string} command\r\n   * @memberof Tetris\r\n   */\n\n\n  handleBoardUpdate(command) {\n    // Do nothing if game ends, or is paused\n    if (this.state.gameOver || this.state.isPaused) {\n      return;\n    } // Prepare variables for additions to x/y coordinates, current active tile and new rotation\n\n\n    let xAdd = 0;\n    let yAdd = 0;\n    let rotateAdd = 0;\n    let tile = this.state.activeTile; // If tile should move to the left\n    // set xAdd to -1\n\n    if (command === 'left') {\n      xAdd = -1;\n    } // If tile should move to the right\n    // set xAdd to 1\n\n\n    if (command === 'right') {\n      xAdd = 1;\n    } // If tile should be rotated\n    // set rotateAdd to 1\n\n\n    if (command === 'rotate') {\n      rotateAdd = 1;\n    } // If tile should fall faster\n    // set yAdd to 1\n\n\n    if (command === 'down') {\n      yAdd = 1;\n    } // Get current x/y coordinates, active tile, rotate and all tiles\n\n\n    let field = this.state.field;\n    let x = this.state.activeTileX;\n    let y = this.state.activeTileY;\n    let rotate = this.state.tileRotate;\n    const tiles = this.state.tiles; // Remove actual tile from field to test for new insert position\n\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0;\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0;\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0;\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0; // Test if the move can be executed on actual field\n\n    let xAddIsValid = true; // Test if tile should move horizontally\n\n    if (xAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be moved without getting outside the board\n        if (x + xAdd + tiles[tile][rotate][i][0] >= 0 && x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth) {\n          if (field[y + tiles[tile][rotate][i][1]][x + xAdd + tiles[tile][rotate][i][0]] !== 0) {\n            // Prevent the move\n            xAddIsValid = false;\n          }\n        } else {\n          // Prevent the move\n          xAddIsValid = false;\n        }\n      }\n    } // If horizontal move is valid update x variable (move the tile)\n\n\n    if (xAddIsValid) {\n      x += xAdd;\n    } // Try to rotate the tile\n\n\n    let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd;\n    let rotateIsValid = true; // Test if tile should rotate\n\n    if (rotateAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be rotated without getting outside the board\n        if (x + tiles[tile][newRotate][i][0] >= 0 && x + tiles[tile][newRotate][i][0] < this.props.boardWidth && y + tiles[tile][newRotate][i][1] >= 0 && y + tiles[tile][newRotate][i][1] < this.props.boardHeight) {\n          // Test of tile rotation is not blocked by other tiles\n          if (field[y + tiles[tile][newRotate][i][1]][x + tiles[tile][newRotate][i][0]] !== 0) {\n            // Prevent rotation\n            rotateIsValid = false;\n          }\n        } else {\n          // Prevent rotation\n          rotateIsValid = false;\n        }\n      }\n    } // If rotation is valid update rotate variable (rotate the tile)\n\n\n    if (rotateIsValid) {\n      rotate = newRotate;\n    } // Try to speed up the fall of the tile\n\n\n    let yAddIsValid = true; // Test if tile should fall faster\n\n    if (yAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can fall faster without getting outside the board\n        if (y + yAdd + tiles[tile][rotate][i][1] >= 0 && y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight) {\n          // Test if faster fall is not blocked by other tiles\n          if (field[y + yAdd + tiles[tile][rotate][i][1]][x + tiles[tile][rotate][i][0]] !== 0) {\n            // Prevent faster fall\n            yAddIsValid = false;\n          }\n        } else {\n          // Prevent faster fall\n          yAddIsValid = false;\n        }\n      }\n    } // If speeding up the fall is valid (move the tile down faster)\n\n\n    if (yAddIsValid) {\n      y += yAdd;\n    } // Render the tile at new position\n\n\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile;\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile;\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile;\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile; // If moving down is not possible, remove completed rows add score\n    // and find next tile and check if game is over\n\n    if (!yAddIsValid) {\n      for (let row = this.props.boardHeight - 1; row >= 0; row--) {\n        let isLineComplete = true; // Check if row is completed\n\n        for (let col = 0; col < this.props.boardWidth; col++) {\n          if (field[row][col] === 0) {\n            isLineComplete = false;\n          }\n        } // Remove completed rows\n\n\n        if (isLineComplete) {\n          for (let yRowSrc = row; row > 0; row--) {\n            for (let col = 0; col < this.props.boardWidth; col++) {\n              field[row][col] = field[row - 1][col];\n            }\n          } // Check if the row is the last\n\n\n          row = this.props.boardHeight;\n        }\n      } // Update state - update score, update number of tiles, change level\n\n\n      this.setState(prev => ({\n        score: prev.score + 1 * prev.level,\n        tileCount: prev.tileCount + 1,\n        level: 1 + Math.floor(prev.tileCount / 10)\n      })); // Prepare new timer\n\n      let timerId; // Reset the timer\n\n      clearInterval(this.state.timerId); // Update new timer\n\n      timerId = setInterval(() => this.handleBoardUpdate('down'), 1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)); // Use new timer\n\n      this.setState({\n        timerId: timerId\n      }); // Create new tile\n\n      tile = Math.floor(Math.random() * 7 + 1);\n      x = parseInt(this.props.boardWidth) / 2;\n      y = 1;\n      rotate = 0; // Test if game is over - test if new tile can't be placed in field\n\n      if (field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !== 0 || field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !== 0 || field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !== 0 || field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !== 0) {\n        // Stop the game and aler the player that the game is over\n        this.setState({\n          gameOver: true\n        });\n        alert(\"Game Over\");\n      } else {\n        // Otherwise, render new tile and continue\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile;\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile;\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile;\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile;\n      }\n    } // Update state - use new field, active x/y coordinates, rotation and activeTile\n\n\n    this.setState({\n      field: field,\n      activeTileX: x,\n      activeTileY: y,\n      tileRotate: rotate,\n      activeTile: tile\n    });\n  }\n  /**\r\n   * @description Stops and resumes the game\r\n   * @memberof Tetris\r\n   */\n\n\n  pauseMusic() {\n    this.setState({\n      pauseMusic: !this.state.pauseMusic\n    });\n  } // shows help when the Help Button is Clicked\n  // this displays an alert with the instructions of how to play the game and win\n\n\n  helpClick() {\n    alert('The goal is to drop blocks, called tetrominoes, down into a playing field to make lines. Tetriminoes are made of four connected squares each  There are seven different types of tetrominoes. Levels have a set goal, or number of lines to clear. When the goal number reaches zero, the player moves to the next level. As the levels go up, the tetrominoes fall faster. A player receives bonus points if he can clear more than one line with a single tetromino. Clearing four lines is called a \"tetris\", three lines a \"triple\" and two lines a \"double\" - finish level 10 to win the game');\n  } // Keyboard Event Handling allows the user to play the game using either the KeyBoard or the mouse \n\n\n  handleKeyDown(event) {\n    console.log(event.keyCode); // PRESS LEFT ARROW\n\n    if (event.keyCode == 37) {\n      this.handleBoardUpdate('left');\n    } // PRESS UP ARROW\n    else if (event.keyCode == 38) {\n        this.handleBoardUpdate('rotate');\n      } // PRESS RIGHT ARROW\n      else if (event.keyCode == 39) {\n          this.handleBoardUpdate('right');\n        } // PRESS DOWN ARROW\n        else if (event.keyCode == 40) {\n            this.handleBoardUpdate('down');\n          }\n  }\n\n  render() {\n    // conditional alerts the user when the player has reached level 10 and \"Won \" the game\n    // then it runs the method to restart the game\n    if (this.state.level >= 10) {\n      alert(\"Congratulations you have won the game!\");\n      this.handleNewGameClick();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"tetris\",\n      onKeyDown: this.handleKeyDown.bind(this),\n      tabIndex: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(TetrisBoard, {\n      field: this.state.field,\n      gameOver: this.state.gameOver,\n      score: this.state.score,\n      level: this.state.level,\n      rotate: this.state.tileRotate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tetris__block-controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('left'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Left\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('down'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"Down\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('right'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Right\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('rotate'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"Rotate\"))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tetris__game-controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.handleNewGameClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, \"New Game\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.handlePauseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, this.state.isPaused ? 'Resume' : 'Pause'), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.helpClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, \" Help \"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.pauseMusic.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \" \", this.state.pauseMusic ? 'Music On' : 'Music Off', \" \")), React.createElement(PlayMusic, {\n      pauseMusic: this.state.pauseMusic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Tetris;","map":{"version":3,"sources":["C:/Users/steve/Desktop/Code/Level_2/task12/tetris/react-teatris/src/Components/Tetris.tsx"],"names":["React","Container","Row","Col","TetrisBoard","PlayMusic","Tetris","Component","constructor","props","handlePauseClick","setState","prev","isPaused","handleNewGameClick","field","y","boardHeight","row","x","boardWidth","push","xStart","Math","floor","parseInt","activeTileX","activeTileY","activeTile","tileRotate","score","level","tileCount","gameOver","pauseMusic","state","timerId","tiles","componentDidMount","window","setInterval","handleBoardUpdate","componentWillUnmount","clearInterval","command","xAdd","yAdd","rotateAdd","tile","rotate","xAddIsValid","i","newRotate","rotateIsValid","yAddIsValid","isLineComplete","col","yRowSrc","random","alert","helpClick","handleKeyDown","event","console","log","keyCode","render","bind"],"mappings":"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","sourcesContent":["///\r\n// src/components/Tetris.tsx\r\n\r\n// Import React\r\nimport * as React from 'react'\r\n\r\n\r\n\r\n\r\n// import react-boostrap components\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n// Import TetrisBoard component\r\nimport TetrisBoard from './Board'\r\nimport PlayMusic from '../Media/Music'\r\n\r\n// Define props for Tetris component\r\ntype TetrisProps = {\r\n    boardWidth: any,\r\n    boardHeight: any\r\n}\r\n\r\n// Define props for Tetris component state\r\ntype TetrisState = {\r\n    activeTileX: number,\r\n    activeTileY: number,\r\n    activeTile: number,\r\n    tileRotate: number,\r\n    score: number,\r\n    level: number,\r\n    tileCount: number,\r\n    gameOver: boolean,\r\n    isPaused: boolean,\r\n    field: any[],\r\n    timerId: any,\r\n    pauseMusic: boolean,\r\n    tiles: number[][][][]\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Create Tetris component\r\nclass Tetris extends React.Component<TetrisProps, TetrisState> {\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        // Generate board based on number of boardHeight & boardWidth props\r\n        let field = []\r\n\r\n        for (let y = 0; y < props.boardHeight; y++) {\r\n            let row = []\r\n\r\n            for (let x = 0; x < props.boardWidth; x++) {\r\n                row.push(0)\r\n            }\r\n\r\n            field.push(row)\r\n        }\r\n\r\n        // Set starting column to center\r\n        let xStart = Math.floor(parseInt(props.boardWidth) / 2)\r\n\r\n        // Initialize state with starting conditions\r\n        this.state = {\r\n            activeTileX: xStart,\r\n            activeTileY: 1,\r\n            activeTile: 1,\r\n            tileRotate: 0,\r\n            score: 0,\r\n            level: 1,\r\n            tileCount: 0,\r\n            gameOver: false,\r\n            isPaused: false,\r\n            field: field,\r\n            timerId: null,\r\n            pauseMusic: false,\r\n            \r\n\r\n            tiles: [\r\n                // 7 tiles\r\n                // Each tile can be rotated 4 times (x/y coordinates)\r\n                [\r\n                    // The default square\r\n                    [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n                    [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n                    [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n                    [[0, 0], [0, 0], [0, 0], [0, 0]]\r\n                ],\r\n                [\r\n                    // The cube tile (block 2x2)\r\n                    [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n                    [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n                    [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n                    [[0, 0], [1, 0], [0, 1], [1, 1]]\r\n                ],\r\n                [\r\n                    // The I tile\r\n                    [[0, -1], [0, 0], [0, 1], [0, 2]],\r\n                    [[-1, 0], [0, 0], [1, 0], [2, 0]],\r\n                    [[0, -1], [0, 0], [0, 1], [0, 2]],\r\n                    [[-1, 0], [0, 0], [1, 0], [2, 0]]\r\n                ],\r\n                [\r\n                    // The T tile\r\n                    [[0, 0], [-1, 0], [1, 0], [0, -1]],\r\n                    [[0, 0], [1, 0], [0, 1], [0, -1]],\r\n                    [[0, 0], [-1, 0], [1, 0], [0, 1]],\r\n                    [[0, 0], [-1, 0], [0, 1], [0, -1]]\r\n                ],\r\n                [\r\n                    // The inverse L tile\r\n                    [[0, 0], [-1, 0], [1, 0], [-1, -1]],\r\n                    [[0, 0], [0, 1], [0, -1], [1, -1]],\r\n                    [[0, 0], [1, 0], [-1, 0], [1, 1]],\r\n                    [[0, 0], [0, 1], [0, -1], [-1, 1]]\r\n                ],\r\n                [\r\n                    // The L tile\r\n                    [[0, 0], [1, 0], [-1, 0], [1, -1]],\r\n                    [[0, 0], [0, 1], [0, -1], [1, 1]],\r\n                    [[0, 0], [1, 0], [-1, 0], [-1, 1]],\r\n                    [[0, 0], [0, 1], [0, -1], [-1, -1]]\r\n                ],\r\n                [\r\n                    // The Z tile\r\n                    [[0, 0], [1, 0], [0, -1], [-1, -1]],\r\n                    [[0, 0], [1, 0], [0, 1], [1, -1]],\r\n                    [[0, 0], [1, 0], [0, -1], [-1, -1]],\r\n                    [[0, 0], [1, 0], [0, 1], [1, -1]]\r\n                ],\r\n                [\r\n                    // The inverse Z tile\r\n                    [[0, 0], [-1, 0], [0, -1], [1, -1]],\r\n                    [[0, 0], [0, -1], [1, 0], [1, 1]],\r\n                    [[0, 0], [-1, 0], [0, -1], [1, -1]],\r\n                    [[0, 0], [0, -1], [1, 0], [1, 1]]\r\n                ]\r\n            ]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Sets timer after component mounts\r\n     * Uses level (this.state.level) to determine the interval (game speed)\r\n     * and executes handleBoardUpdate() set to 'down' method during each interval\r\n     * @memberof Tetris\r\n     */\r\n    componentDidMount() {\r\n        let timerId\r\n\r\n        timerId = window.setInterval(\r\n            () => this.handleBoardUpdate('down'),\r\n            1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n        )\r\n\r\n        this.setState({\r\n            timerId: timerId\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Resets the timer when component unmounts\r\n     * @memberof Tetris\r\n     */\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.state.timerId)\r\n    }\r\n\r\n    /**\r\n     * @description Handles board updates\r\n     * @param {string} command\r\n     * @memberof Tetris\r\n     */\r\n    handleBoardUpdate(command: string) {\r\n        // Do nothing if game ends, or is paused\r\n        if (this.state.gameOver || this.state.isPaused) {\r\n            return\r\n        }\r\n\r\n        // Prepare variables for additions to x/y coordinates, current active tile and new rotation\r\n        let xAdd = 0\r\n        let yAdd = 0\r\n        let rotateAdd = 0\r\n        let tile = this.state.activeTile\r\n\r\n        // If tile should move to the left\r\n        // set xAdd to -1\r\n        if (command === 'left') {\r\n            xAdd = -1\r\n        }\r\n\r\n        // If tile should move to the right\r\n        // set xAdd to 1\r\n        if (command === 'right') {\r\n            xAdd = 1\r\n        }\r\n\r\n        // If tile should be rotated\r\n        // set rotateAdd to 1\r\n        if (command === 'rotate') {\r\n            rotateAdd = 1\r\n        }\r\n\r\n        // If tile should fall faster\r\n        // set yAdd to 1\r\n        if (command === 'down') {\r\n            yAdd = 1\r\n        }\r\n\r\n        // Get current x/y coordinates, active tile, rotate and all tiles\r\n        let field = this.state.field\r\n        let x = this.state.activeTileX\r\n        let y = this.state.activeTileY\r\n        let rotate = this.state.tileRotate\r\n\r\n        const tiles = this.state.tiles\r\n\r\n        // Remove actual tile from field to test for new insert position\r\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0\r\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0\r\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0\r\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0\r\n\r\n        // Test if the move can be executed on actual field\r\n        let xAddIsValid = true\r\n\r\n        // Test if tile should move horizontally\r\n        if (xAdd !== 0) {\r\n            for (let i = 0; i <= 3; i++) {\r\n                // Test if tile can be moved without getting outside the board\r\n                if (\r\n                    x + xAdd + tiles[tile][rotate][i][0] >= 0\r\n                    && x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth\r\n                ) {\r\n                    if (field[y + tiles[tile][rotate][i][1]][x + xAdd + tiles[tile][rotate][i][0]] !== 0) {\r\n                        // Prevent the move\r\n                        xAddIsValid = false\r\n                    }\r\n                } else {\r\n                    // Prevent the move\r\n                    xAddIsValid = false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If horizontal move is valid update x variable (move the tile)\r\n        if (xAddIsValid) {\r\n            x += xAdd\r\n        }\r\n\r\n        // Try to rotate the tile\r\n        let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd\r\n        let rotateIsValid = true\r\n\r\n        // Test if tile should rotate\r\n        if (rotateAdd !== 0) {\r\n            for (let i = 0; i <= 3; i++) {\r\n                // Test if tile can be rotated without getting outside the board\r\n                if (\r\n                    x + tiles[tile][newRotate][i][0] >= 0 &&\r\n                    x + tiles[tile][newRotate][i][0] < this.props.boardWidth &&\r\n                    y + tiles[tile][newRotate][i][1] >= 0 &&\r\n                    y + tiles[tile][newRotate][i][1] < this.props.boardHeight\r\n                ) {\r\n                    // Test of tile rotation is not blocked by other tiles\r\n                    if (\r\n                        field[y + tiles[tile][newRotate][i][1]][\r\n                        x + tiles[tile][newRotate][i][0]\r\n                        ] !== 0\r\n                    ) {\r\n                        // Prevent rotation\r\n                        rotateIsValid = false\r\n                    }\r\n                } else {\r\n                    // Prevent rotation\r\n                    rotateIsValid = false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If rotation is valid update rotate variable (rotate the tile)\r\n        if (rotateIsValid) {\r\n            rotate = newRotate\r\n        }\r\n\r\n        // Try to speed up the fall of the tile\r\n        let yAddIsValid = true\r\n\r\n        // Test if tile should fall faster\r\n        if (yAdd !== 0) {\r\n            for (let i = 0; i <= 3; i++) {\r\n                // Test if tile can fall faster without getting outside the board\r\n                if (\r\n                    y + yAdd + tiles[tile][rotate][i][1] >= 0 &&\r\n                    y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight\r\n                ) {\r\n                    // Test if faster fall is not blocked by other tiles\r\n                    if (\r\n                        field[y + yAdd + tiles[tile][rotate][i][1]][\r\n                        x + tiles[tile][rotate][i][0]\r\n                        ] !== 0\r\n                    ) {\r\n                        // Prevent faster fall\r\n                        yAddIsValid = false\r\n                    }\r\n                } else {\r\n                    // Prevent faster fall\r\n                    yAddIsValid = false\r\n                }\r\n            }\r\n        }\r\n\r\n        // If speeding up the fall is valid (move the tile down faster)\r\n        if (yAddIsValid) {\r\n            y += yAdd\r\n        }\r\n\r\n        // Render the tile at new position\r\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\r\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\r\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\r\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\r\n\r\n        // If moving down is not possible, remove completed rows add score\r\n        // and find next tile and check if game is over\r\n        if (!yAddIsValid) {\r\n            for (let row = this.props.boardHeight - 1; row >= 0; row--) {\r\n                let isLineComplete = true\r\n\r\n                // Check if row is completed\r\n                for (let col = 0; col < this.props.boardWidth; col++) {\r\n                    if (field[row][col] === 0) {\r\n                        isLineComplete = false\r\n                    }\r\n                }\r\n\r\n                // Remove completed rows\r\n                if (isLineComplete) {\r\n                    for (let yRowSrc = row; row > 0; row--) {\r\n                        for (let col = 0; col < this.props.boardWidth; col++) {\r\n                            field[row][col] = field[row - 1][col]\r\n                        }\r\n                    }\r\n\r\n                    // Check if the row is the last\r\n                    row = this.props.boardHeight\r\n                }\r\n            }\r\n\r\n            // Update state - update score, update number of tiles, change level\r\n            this.setState(prev => ({\r\n                score: prev.score + 1 * prev.level,\r\n                tileCount: prev.tileCount + 1,\r\n                level: 1 + Math.floor(prev.tileCount / 10)\r\n            }))\r\n\r\n            // Prepare new timer\r\n            let timerId\r\n\r\n            // Reset the timer\r\n            clearInterval(this.state.timerId)\r\n\r\n            // Update new timer\r\n            timerId = setInterval(\r\n                () => this.handleBoardUpdate('down'),\r\n                1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n            )\r\n\r\n            // Use new timer\r\n            this.setState({\r\n                timerId: timerId\r\n            })\r\n\r\n            // Create new tile\r\n            tile = Math.floor(Math.random() * 7 + 1)\r\n            x = parseInt(this.props.boardWidth) / 2\r\n            y = 1\r\n            rotate = 0\r\n\r\n            // Test if game is over - test if new tile can't be placed in field\r\n            if (\r\n                field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !== 0 ||\r\n                field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !== 0 ||\r\n                field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !== 0 ||\r\n                field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !== 0\r\n            ) {\r\n                // Stop the game and aler the player that the game is over\r\n                this.setState({\r\n                    gameOver: true\r\n                })\r\n                alert(\"Game Over\")\r\n            } else {\r\n                // Otherwise, render new tile and continue\r\n                field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\r\n                field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\r\n                field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\r\n                field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\r\n            }\r\n        }\r\n\r\n        // Update state - use new field, active x/y coordinates, rotation and activeTile\r\n        this.setState({\r\n            field: field,\r\n            activeTileX: x,\r\n            activeTileY: y,\r\n            tileRotate: rotate,\r\n            activeTile: tile\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Stops and resumes the game\r\n     * @memberof Tetris\r\n     */\r\n    handlePauseClick = () => {\r\n        this.setState(prev => ({\r\n            isPaused: !prev.isPaused\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * @description Resets the game\r\n     * @memberof Tetris\r\n     */\r\n    handleNewGameClick = () => {\r\n        // Create an empty board\r\n        let field: any[] = []\r\n\r\n        for (let y = 0; y < this.props.boardHeight; y++) {\r\n            let row = []\r\n\r\n            for (let x = 0; x < this.props.boardWidth; x++) {\r\n                row.push(0)\r\n            }\r\n\r\n            field.push(row)\r\n        }\r\n\r\n        // Set starting column to center\r\n        let xStart = Math.floor(parseInt(this.props.boardWidth) / 2)\r\n\r\n        // Initialize state with starting conditions\r\n        this.setState({\r\n            activeTileX: xStart,\r\n            activeTileY: 1,\r\n            activeTile: 2,\r\n            tileRotate: 0,\r\n            score: 0,\r\n            level: 1,\r\n            tileCount: 0,\r\n            gameOver: false,\r\n            pauseMusic: false,\r\n            field: field\r\n        })\r\n    }\r\n\r\n    pauseMusic() {\r\n        this.setState({\r\n            pauseMusic: !this.state.pauseMusic\r\n        })\r\n    }\r\n\r\n\r\n    // shows help when the Help Button is Clicked\r\n    // this displays an alert with the instructions of how to play the game and win\r\n    helpClick() {\r\n        alert('The goal is to drop blocks, called tetrominoes, down into a playing field to make lines. Tetriminoes are made of four connected squares each  There are seven different types of tetrominoes. Levels have a set goal, or number of lines to clear. When the goal number reaches zero, the player moves to the next level. As the levels go up, the tetrominoes fall faster. A player receives bonus points if he can clear more than one line with a single tetromino. Clearing four lines is called a \"tetris\", three lines a \"triple\" and two lines a \"double\" - finish level 10 to win the game')\r\n    }\r\n\r\n    // Keyboard Event Handling allows the user to play the game using either the KeyBoard or the mouse \r\n    handleKeyDown(event: React.KeyboardEvent) {\r\n        console.log(event.keyCode);\r\n        \r\n        // PRESS LEFT ARROW\r\n        if (event.keyCode == 37) {\r\n            this.handleBoardUpdate('left')\r\n        }\r\n        // PRESS UP ARROW\r\n        else if (event.keyCode == 38) {\r\n            this.handleBoardUpdate('rotate')\r\n        }\r\n        // PRESS RIGHT ARROW\r\n        else if (event.keyCode == 39) {\r\n            this.handleBoardUpdate('right')\r\n        }\r\n        // PRESS DOWN ARROW\r\n        else if (event.keyCode == 40) {\r\n            this.handleBoardUpdate('down')\r\n        }\r\n      \r\n\r\n    }\r\n\r\n    render()\r\n    { // conditional alerts the user when the player has reached level 10 and \"Won \" the game\r\n        // then it runs the method to restart the game\r\n        if (this.state.level >= 10) {\r\n            alert(\"Congratulations you have won the game!\") \r\n            this.handleNewGameClick()\r\n\r\n        }\r\n        return (\r\n           \r\n            <div className=\"tetris\" onKeyDown={this.handleKeyDown.bind(this)} tabIndex={0} >\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col>\r\n               \r\n            \r\n                        \r\n                {/* Tetris board */}\r\n                <TetrisBoard\r\n                    field={this.state.field}\r\n                    gameOver={this.state.gameOver}\r\n                    score={this.state.score}\r\n                    level={this.state.level}\r\n                    rotate={this.state.tileRotate} /> \r\n                         \r\n                {/* Buttons to control blocks */}\r\n                <div className='tetris__block-controls'>\r\n                    <button className=\"btn\" onClick={() => this.handleBoardUpdate('left')}>Left</button>\r\n\r\n                    <button className=\"btn\" onClick={() => this.handleBoardUpdate('down')}>Down</button>\r\n\r\n                    <button className=\"btn\" onClick={() => this.handleBoardUpdate('right')}>Right</button>\r\n\r\n                    <button className=\"btn\" onClick={() => this.handleBoardUpdate('rotate')}>Rotate</button>\r\n                            </div>\r\n                            </Col>\r\n\r\n                        <Col>\r\n                {/* Buttons to control game */}\r\n                <div className=\"tetris__game-controls\">\r\n                    <button className=\"btn\" onClick={this.handleNewGameClick}>New Game</button>\r\n                    <button className=\"btn\" onClick={this.handlePauseClick}>{this.state.isPaused ? 'Resume' : 'Pause'}</button>\r\n                    <button className=\"btn\"  onClick={this.helpClick}> Help </button>\r\n                                <button className=\"btn\" onClick={this.pauseMusic.bind(this)}> {this.state.pauseMusic ? 'Music On' : 'Music Off'} </button>\r\n                                   \r\n\r\n                </div>\r\n                      \r\n                        {/* Calls an HTML Audio element to play the music in the background */}\r\n                        <PlayMusic pauseMusic={this.state.pauseMusic}/>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tetris"]},"metadata":{},"sourceType":"module"}